'''Workflow for the CAMP short-read assembly module.'''


from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, exists, join
import pandas as pd
import shutil # from shutil import copy doesn't work here
import tarfile
from utils import Workflow_Dirs, ingest_samples


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], "short-read-assembly")


# Specify the location of any external resources and scripts
dirs_ext = config['ext'] # join(dirname(abspath(__file__)), 'ext')
dirs_scr = join(dirs_ext, 'scripts')

# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)
ASSEMBS = []
for a in config['assembler'].split(','):
    if 'metaspades' in a:
        ASSEMBS.append('0_metaspades')
    if 'megahit' in a:
        ASSEMBS.append('1_megahit')


# --- Workflow output --- #


def workflow_mode(wildcards):
    out = [join(dirs.OUT, '2_quast', 'report.tsv')]
    for a in ASSEMBS:
        out.extend(expand(join(dirs.OUT, a, '{sample}', 'scaffolds.fasta'), sample = SAMPLES))
    return(out)


if config['option'] != '':
    option = '--' + config['option'],
else:
    option = ''
    
rule all:
    input:
        join(dirs.OUT, 'final_reports', 'samples.csv'),
        join(dirs.OUT, 'final_reports', 'quast.tar.gz'),
        join(dirs.OUT, 'final_reports', 'ctg_stats.csv'),
        join(dirs.OUT, 'final_reports', 'ctg_lens.csv')


# --- Workflow steps --- #


rule metaspades_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
    log:
        join(dirs.LOG, 'metaspades', '{sample}.out'),
    conda: "assemblers",
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'0_metaspades','{sample}'),
        option = option,
    shell:
        """
        if [ -f "{params.out_dir}/K33/assembly_graph.fastg" ]; then
            spades.py --restart-from k55 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 55
        elif [ -f "{params.out_dir}/K21/assembly_graph.fastg" ]; then
            spades.py --restart-from k33 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 33
        elif [ -f "{params.out_dir}/corrected.yaml" ]; then
            spades.py --restart-from k21 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 21
        else
            spades.py --only-assembler {params.option} -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} -o {params.out_dir} \
            > {log} 2>&1
        fi
        """    


rule megahit_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        join(dirs.OUT,'1_megahit','{sample}', 'scaffolds.fasta'),
    log:
        join(dirs.LOG, 'megahit', '{sample}.out'),
    conda: "assemblers",
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'1_megahit','{sample}'),
    shell:
        """
        megahit -t {threads} -m {resources.mem_mb} --force -1 {input.fwd} -2 {input.rev} -o {params.out_dir} > {log} 2>&1
        cp {params.out_dir}/final.contigs.fa {params.out_dir}/scaffolds.fasta
        """    


rule step_statistics:
    input:
        join(dirs.OUT, '{asm}', '{sample}', 'scaffolds.fasta'),
    output:
        stats = join(dirs.OUT, '{asm}', '{sample}', 'ctg_stats.csv'),
        lens = join(dirs.OUT, '{asm}', '{sample}', 'ctg_lens.csv'),
    resources:
        mem_mb = config['count_reads_mem_mb'],
    params:
        sample = '{sample}',
        asm = '{asm}',
        calc_script = join(dirs_scr, 'calc_ctg_lens.py'),
    shell:
        """
        python {params.calc_script} {params.sample} {params.asm} {input} {output.stats} {output.lens}
        """


rule concat_statistics:
    input:
        expand(join(dirs.OUT, '{asm}', '{sample}', 'ctg_stats.csv'), asm = ASSEMBS, sample = SAMPLES),
    output:
        join(dirs.OUT, 'final_reports', 'ctg_stats.csv'),
    shell:
        """
        echo -e 'sample_name,assembler,num_ctgs,total_size,mean_ctg_len' | cat - {input} > {output}
        """


rule concat_lengths:
    input:
        expand(join(dirs.OUT, '{asm}', '{sample}', 'ctg_lens.csv'), asm = ASSEMBS, sample = SAMPLES),
    output:
        join(dirs.OUT, 'final_reports', 'ctg_lens.csv'),
    shell:
        """
        echo -e 'sample_name,assembler,ctg_size' | cat - {input} > {output}
        """


rule quast:
    input:
        expand(join(dirs.OUT, '{asm}', '{sample}', 'scaffolds.fasta'), asm = ASSEMBS, sample = SAMPLES),
    output:
        join(dirs.OUT, '2_quast', 'report.tsv'),
    log:
        join(dirs.LOG, 'quast', 'all_assemblies.out'),
    conda: "quast",
    threads: config['quast_threads'],
    resources:
        mem_mb = config['quast_mem_mb'],
    params:
        labels = ','.join([a.split('_')[1] + '_' + s for a in ASSEMBS for s in SAMPLES]),
        out_dir = join(dirs.OUT, '2_quast'),
    shell:
        """
        quast.py --threads {threads} --min-contig 0 -o {params.out_dir} --labels {params.labels} {input} --no-plots || touch {output} > {log} 2>&1
        """


rule make_config:
    input:
        workflow_mode,
    output:
        tar = join(dirs.OUT, 'final_reports', 'quast.tar.gz'),
        csv = join(dirs.OUT, 'final_reports', 'samples.csv'),
    params:
        quast_dir = join(dirs.OUT, '2_quast'),
        out_dir = join(dirs.OUT, 'final_reports'),
        tmp_dir = dirs.TMP,
    run:
        with tarfile.open(str(output.tar),"w:gz") as tar:
            tar.add(str(params.quast_dir))
        dct = {}
        for i in input[1:]:
            info = str(i).split('/')
            s = info[-2]
            a = info[-3].split('_')[1]
            ctgs = join(params.out_dir, '.'.join([s, a, 'fasta']))
            shutil.copy(str(i), ctgs)
            sp = s + '_' + a
            dct[sp] = {}
            dct[sp]['illumina_ctg'] = ctgs
            dct[sp]['illumina_fwd'] = join(str(params.tmp_dir), s + '_1.fastq.gz')
            dct[sp]['illumina_rev'] = join(str(params.tmp_dir), s + '_2.fastq.gz')
        df = pd.DataFrame.from_dict(dct, orient ='index')
        df.reset_index(inplace = True)
        df.rename(columns = {'index': 'sample_name'}, inplace = True)
        df.to_csv(str(output.csv), index = False)

